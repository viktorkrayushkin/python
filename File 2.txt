import pandas as pd
import numpy as np
from scipy.optimize import curve_fit
from scipy.signal import find_peaks
import matplotlib.pyplot as plt

# Предполагается, что данные уже загружены:
# x_data, y_data, dy_data

# Параметры для настройки размера и цвета точек
marker_size = 8          # Размер маркера
marker_color = 'blue'    # Цвет заливки маркера
edge_color = 'black'     # Цвет края маркера
errorbar_color = 'gray'  # Цвет баров погрешности

# Шаг 1: Поиск пиков в данных
# Устанавливаем высоту пиков, которую считаем значимой (может потребовать настройки)
peak_indices, _ = find_peaks(y_data, height=np.mean(y_data))

# Выводим найденные пики
print(f"Найдено {len(peak_indices)} пиков на позициях: {x_data[peak_indices]}")

# Шаг 2 и 3: Аппроксимация каждого пика отдельно
def gaussian(x, amp, cen, wid):
    return amp * np.exp(-((x - cen) ** 2) / (2 * wid ** 2))

plt.figure(figsize=(12, 8))

# Используем обновленные параметры для настройки маркеров
plt.errorbar(
    x_data, y_data, yerr=dy_data, fmt='o', capsize=3, label='Экспериментальные данные',
    markersize=marker_size,        # Размер маркера
    markerfacecolor=marker_color,  # Цвет заливки маркера
    markeredgecolor=edge_color,    # Цвет края маркера
    ecolor=errorbar_color          # Цвет баров погрешности
)

x_fit = np.linspace(min(x_data), max(x_data), 1000)
total_fit = np.zeros_like(x_fit)

for i, peak_index in enumerate(peak_indices):
    # Определяем диапазон данных вокруг пика
    left = peak_index - 5 if peak_index - 5 >= 0 else 0
    right = peak_index + 6 if peak_index + 6 <= len(x_data) else len(x_data)
    
    x_peak = x_data[left:right]
    y_peak = y_data[left:right]
    dy_peak = dy_data[left:right]
    
    # Начальные приближения для данного пика
    amp_guess = y_data[peak_index]
    cen_guess = x_data[peak_index]
    wid_guess = (max(x_peak) - min(x_peak)) / 2
    
    initial_guess = [amp_guess, cen_guess, wid_guess]
    
    # Ограничения на параметры
    bounds=(
        [0, min(x_peak), 0],
        [np.inf, max(x_peak), np.inf]
    )
    
    # Аппроксимация
    try:
        params, covariance = curve_fit(
            gaussian, x_peak, y_peak, p0=initial_guess, sigma=dy_peak, absolute_sigma=True,
            bounds=bounds
        )
    except RuntimeError as e:
        print(f"Не удалось аппроксимировать пик на позиции {cen_guess}: {e}")
        continue
    
    amp, cen, wid = params
    print(f'Пик {i+1}: Амплитуда = {amp:.2f}, Центр = {cen:.2f}, Ширина = {wid:.2f}')
    
    # Добавляем аппроксимацию данного пика на общий график
    y_fit = gaussian(x_fit, *params)
    total_fit += y_fit  # Если хотим получить сумму всех гауссиан
    
    # Генерируем уникальный цвет для каждого пика
    peak_color = plt.cm.viridis(i / len(peak_indices))
    
    plt.plot(x_fit, y_fit, label=f'Аппроксимация пика {i+1}', color=peak_color)
    
    # Добавляем аннотацию с параметрами пика на график
    plt.annotate(
        f'Пик {i+1}nАмплитуда: {amp:.2f}nЦентр: {cen:.2f}nШирина: {wid:.2f}',
        xy=(cen, amp), xycoords='data',
        xytext=(0, 30), textcoords='offset points',
        arrowprops=dict(arrowstyle='->', color=peak_color),
        color=peak_color,
        fontsize=10,
        ha='center'
    )

plt.legend()
plt.xlabel('x')
plt.ylabel('y')
plt.title('Аппроксимация каждого отдельного пика гауссианой')
plt.grid(True)
plt.show()

# Если хотите увидеть сумму всех аппроксимаций вместе с данными:
plt.figure(figsize=(12, 8))
plt.errorbar(
    x_data, y_data, yerr=dy_data, fmt='o', capsize=3, label='Экспериментальные данные',
    markersize=marker_size,        # Размер маркера
    markerfacecolor=marker_color,  # Цвет заливки маркера
    markeredgecolor=edge_color,    # Цвет края маркера
    ecolor=errorbar_color          # Цвет баров погрешности
)